#import ['if', 'nil'] > . // import objects as children of current object
#import 'std' > libs      // import the objects as children of libs object
> args							      // entry point, read args                	

args > (      	       	  				// parse first 3 objects in args array 
  > args
  [ args[0], args[1], args[2] ] >
) > params

(
  [ std.in, '' ] > split! >
)? > params_manual?					// create macro params_manual

[ args.count ?> 2, params, params_manual? ] > if > input	// if args count is more than 2 use params, else expand params_manual and execute (console input)

input[0] > first
input[1] > sign
input[2] > second

[ sign ?= '*', first * second ] > if! > result    // set result to first multiplied by second, if the sign is '*'
[ sign ?= '/', first / second ] > if! > result
[ sign ?= '+', first + second ] > if! > result 
[ sign ?= '-', first - second ] > if! > result

[ '%d', result ] > std.out!                     	// expand stdout macro with the parameter result formated as a number


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//						ANOTHER EXAMPLE??								       //
//						YES!!										       //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

(							// this is anonymous constructor that construct the object 'objekt' immediately
  2 > x			  // use this if you want only one object constructed
  3 > y

  (
    x * y >
  ) > f
  
)! > objekt